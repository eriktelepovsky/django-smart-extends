diff --git a/django/template/base.py b/django/template/base.py
index 8ee7723..3ace3a4 100644
--- a/django/template/base.py
+++ b/django/template/base.py
@@ -227,6 +227,7 @@ class Lexer(object):
         else:
             token = Token(TOKEN_TEXT, token_string)
         token.lineno = self.lineno
+        token.source = self.origin, (-1, -1)
         self.lineno += token_string.count('\n')
         return token
 
@@ -304,6 +305,7 @@ class Parser(object):
                                           "in the template." % node)
         if isinstance(nodelist, NodeList) and not isinstance(node, TextNode):
             nodelist.contains_nontext = True
+        node.source = token.source
         nodelist.append(node)
 
     def enter_command(self, command, token):
diff --git a/django/template/debug.py b/django/template/debug.py
index c7ac007..d82de50 100644
--- a/django/template/debug.py
+++ b/django/template/debug.py
@@ -55,10 +55,6 @@ class DebugParser(Parser):
     def create_variable_node(self, contents):
         return DebugVariableNode(contents)
 
-    def extend_nodelist(self, nodelist, node, token):
-        node.source = token.source
-        super(DebugParser, self).extend_nodelist(nodelist, node, token)
-
     def unclosed_block_tag(self, parse_until):
         command, source = self.command_stack.pop()
         msg = "Unclosed tag '%s'. Looking for one of: %s " % (command, ', '.join(parse_until))
diff --git a/django/template/loader.py b/django/template/loader.py
index cfffb40..244abf3 100644
--- a/django/template/loader.py
+++ b/django/template/loader.py
@@ -80,7 +80,7 @@ class LoaderOrigin(Origin):
         return self.loader(self.loadname, self.dirs)[0]
 
 def make_origin(display_name, loader, name, dirs):
-    if settings.TEMPLATE_DEBUG and display_name:
+    if display_name:
         return LoaderOrigin(display_name, loader, name, dirs)
     else:
         return None
