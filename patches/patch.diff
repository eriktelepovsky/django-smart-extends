Index: template/__init__.py
===================================================================
--- django/template/__init__.py	(revision: 13096)
+++ django/template/__init__.py	(working copy)
@@ -230,6 +230,10 @@
                 token = Token(TOKEN_COMMENT, '')
         else:
             token = Token(TOKEN_TEXT, token_string)
+        # token.source is a tuple, this contains origin object and
+        # the range of the columns where is this token.
+        # If TEMPLATE_DEBUG = False we don't need it, therefore we set with (-1, -1)
+        token.source = self.origin, (-1, -1)
         return token
 
 class Parser(object):
@@ -301,6 +305,7 @@
                 raise TemplateSyntaxError("%r must be the first tag in the template." % node)
         if isinstance(nodelist, NodeList) and not isinstance(node, TextNode):
             nodelist.contains_nontext = True
+        node.source = token.source
         nodelist.append(node)
 
     def enter_command(self, command, token):
Index: django/template/loader.py
===================================================================
--- django/template/loader.py	(revision: 13096)
+++ django/template/loader.py	(working copy)
@@ -36,10 +36,8 @@
         return self.loader(self.loadname, self.dirs)[0]
 
 def make_origin(display_name, loader, name, dirs):
-    if settings.TEMPLATE_DEBUG:
-        return LoaderOrigin(display_name, loader, name, dirs)
-    else:
-        return None
+    return LoaderOrigin(display_name, loader, name, dirs)
+
 
 def find_template_source(name, dirs=None):
     # Calculate template_source_loaders the first time the function is executed
Index: template/loader.py
===================================================================
--- django/template/debug.py    2013-10-02 20:47:35.440205525 +0200
+++ django/template/debug.py   2013-10-02 20:47:44.116205131 +0200
@@ -52,10 +52,6 @@
     def create_variable_node(self, contents):
         return DebugVariableNode(contents)
 
-    def extend_nodelist(self, nodelist, node, token):
-        node.source = token.source
-        super(DebugParser, self).extend_nodelist(nodelist, node, token)
-
     def unclosed_block_tag(self, parse_until):
         command, source = self.command_stack.pop()
         msg = "Unclosed tag '%s'. Looking for one of: %s " % (command, ', '.join(parse_until))
