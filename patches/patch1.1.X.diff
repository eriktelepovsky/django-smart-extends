Index: template/__init__.py
===================================================================
--- template/__init__.py	(revisión: 13096)
+++ template/__init__.py	(copia de trabajo)
@@ -230,6 +230,7 @@
                 token = Token(TOKEN_COMMENT, '')
         else:
             token = Token(TOKEN_TEXT, token_string)
+        token.source = self.origin
         return token
 
 class Parser(object):
@@ -301,6 +302,7 @@
                 raise TemplateSyntaxError("%r must be the first tag in the template." % node)
         if isinstance(nodelist, NodeList) and not isinstance(node, TextNode):
             nodelist.contains_nontext = True
+        node.source = token.source
         nodelist.append(node)
 
     def enter_command(self, command, token):
Index: template/loader.py
===================================================================
--- template/loader.py	(revisión: 13096)
+++ template/loader.py	(copia de trabajo)
@@ -35,11 +35,17 @@
     def reload(self):
         return self.loader(self.loadname, self.dirs)[0]
 
+class LoaderOriginFake(object):
+
+    def __init__(self, display_name, loader, name, dirs):
+        self.name = display_name
+        self.loader, self.loadname, self.dirs = loader, name, dirs
+
 def make_origin(display_name, loader, name, dirs):
     if settings.TEMPLATE_DEBUG:
         return LoaderOrigin(display_name, loader, name, dirs)
     else:
-        return None
+        return LoaderOriginFake(display_name, loader, name, dirs)
 
 def find_template_source(name, dirs=None):
     # Calculate template_source_loaders the first time the function is executed
